generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  userType String   // Can be 'JobSeeker' or 'Company'

  // Polymorphic relation for user types
  jobSeeker JobSeeker?
  company   Company?
  applications Apply[]
  jobPosts    JobPost[]

  // Chat relationships
  conversations1 Conversation[] @relation(name: "User1Conversations")
  conversations2 Conversation[] @relation(name: "User2Conversations")
  sentMessages   Message[] @relation(name: "SentMessages")
  receivedMessages Message[] @relation(name: "ReceivedMessages")
}

model JobSeeker {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  salaryExpectation Float?
  location         String?
  experience       Int?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relationship with skills
  requiredSkills   JobSeekerReqSkills[]
}

model Company {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  description String?
  website    String?
  techStack  String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skills {
  id               Int    @id @default(autoincrement())
  name             String @unique
  jobPostReqSkills JobPostReqSkills[]
  jobSeekerReqSkills JobSeekerReqSkills[]
}

model JobPost {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  position    String  
  salary      Float
  experience  Int
  location    String
  createdAt   DateTime  @default(now())
  userId   Int       // Reference to the company that created the post
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Add relation to company
  requiredSkills JobPostReqSkills[]
  applications   Apply[]
}

model JobPostReqSkills {
  id        Int     @id @default(autoincrement())
  jobPostId Int
  skillId   Int
  jobPost   JobPost @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  skill     Skills  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  @@unique([jobPostId, skillId])
}

model JobSeekerReqSkills {
  id        Int     @id @default(autoincrement())
  jobSeekerId Int
  skillId   Int
  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  skill     Skills    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  @@unique([jobSeekerId, skillId])
}

model Apply {
  applicationId Int      @id @default(autoincrement())
  userId   Int
  userName String
  jobPostId     Int
  status        String   // Can be 'Pending', 'Accepted', 'Rejected', etc.
  dateCreated   DateTime @default(now())
  cvPath        String 
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPost       JobPost   @relation(fields: [jobPostId], references: [id], onDelete: Cascade)

  @@unique([userId, jobPostId]) // Ensure that a job seeker can apply only once to a specific job
}


model Conversation {
  id    Int  @id @default(autoincrement())
  user1 Int
  user2 Int
  messages Message[]

  userOne User @relation(name: "User1Conversations", fields: [user1], references: [id], onDelete: Cascade)
  userTwo User @relation(name: "User2Conversations", fields: [user2], references: [id], onDelete: Cascade)

  @@unique([user1, user2]) // Ensures one conversation per user pair
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  conversationId Int

  sender   User @relation(name: "SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation(name: "ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}